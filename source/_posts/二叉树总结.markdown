title: 二叉树算法总结
date: 2015-04-18 22:18:44
tags: 数据结构与算法
---

二叉树的相关算法，建立、遍历等。

<!--more-->

## 二叉树类结构定义

```
class TreeNode<T> {
	T data;
	TreeNode left, right;
}
```

## 递归遍历（前序）

```
void preOrderTraverse(TreeNode root) {
	if (root == null)
		return;
	print(root.data);
	preOrderTraverse(root.left);
	preOrderTraverse(root.right);
}
```

## 非递归遍历（前序）

```
void preOrderTraverse(TreeNode root) {
	if (root == null)
		return;
	
	Stack<TreeNode> stack = new Stack<>();
	TreeNode cur = root;

	while (cur != null || !stack.empty()) {

		while (cur != null) {
			print(cur.data);
			stack.push(cur);
			cur = cur.left;
		}

		if (!stack.empty()) {
			cur = stack.pop();
			cur = cur.right;
		}

	}	
}
```

## 非递归遍历（中序）

```
void inOrderTraverse(TreeNode root) {
	if (root == null)
		return;
	
	Stack<TreeNode> stack = new Stack<>();
	TreeNode cur = root;

	while (cur != NULL || !stack.empty()) {

		while (cur != NULL) {
			stack.push(cur);
			cur = cur.left;
		}

		if (!stack.empty()) {
			cur = stack.pop();
			print(cur.data);
			cur = cur.right;
		}

	}
}
```

## 非递归遍历（后序）

注意，只有在栈顶出现两次才能输出。

```
void postOrderTraverse(TreeNode root) {
	if (root == null)
		return;
	
	Stack<TreeNode> stack = new Stack<>();
	TreeNode cur = root;
	TreeNode last = null;

	while(cur != null || !stack.empty()){
        while (cur != null) {
            stack.push(cur);
            cur = cur.left;
        }
        
        if (!stack.empty()) {
            cur = stack.peek();
            // 如果已经访问了右子树，则可以访问根节点；否则转向，先去访问右子树
            if (cur.right == null || cur.right == last) {
                results.add(cur.val);
                stack.pop();
                last = cur; // 表示已访问过
                cur = null; // 表示不需要转向，继续弹栈
            } else {
                // 转向
                cur = cur.right;
            }
        }
    }
}
```