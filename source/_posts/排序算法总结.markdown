title: 排序查找算法总结
date: 2015-04-18 22:18:44
tags: 数据结构与算法
---

总结下常见的各种排序算法，包括改进的冒泡排序、直接插入、快排、堆排等。

<!--more-->

# 普通冒泡排序

```
void bubbleSort(int data[], int n) {
	int i, j;
	for ( i=0; i<n-1; i++ )
		for ( j=n-1; j>i; j-- )
			swap(data, i, j);
}
```

优化后的冒泡排序
```
void bubbleSort(int data[], int n) {
	int i, j;
	bool flag = true;
	for ( i=0; i<n-1 && flag; i++) {
		flag = false;
		for ( j=n-1; j>i; j--)
			if (needSwap) {
				swap(data, i, j);
				flag = true;
			}
	}
}
```

# 快排
```
void QSort(int data[], int low, int high) {
	int pivot;
	if (low < high) {
		pivot = Partition(data, low, high);
		QSort(data, low, pivot-1);
		QSort(data, pivot+1, high);
	}
}

int Partition(int data[], int low, int high) {
	int pivotKey = data[low];
	while (low < high) {
		while (low < high && data[high] >= pivotKey)
			high--;
		swap(data, low, high);

		while (low <high && data[low] <= pivotKey)
			low++;
		swap(data, low, high);
	}
	return low;
}
```

# 二分查找

```
int binarySearch(int data[], int n, int key) {
	int low = 0, high = n-1, mid;
	
	while ( low <= high ) {
		mid = (low + high) >>> 1;
		if ( data[mid] > key ) 
			high = mid - 1;
		else if ( data[mid] < key )
			low = mid + 1;
		else if ( data[mid] == key )
			return mid;
	}

	return -1;
}
```

# 二叉排序树查找

```
class BiTNode<T> {
	T data;
	BiTNode left, right;
}

BiTree search(BiTree root, int key) {
	if (root == null) 
		return null;
	if (key < root.data)
		return search(root.left, key);
	if (key > root.data)
		return search(root.right, key);
	return root;
}
```

# 散列表
```
void insertHash(int data[], int key, int n) {
	int addr = indexFor(key);
	while (data[addr] != NULL_KEY)
		addr = (addr + 1) % n;
	data[addr] = key;
}

int searchHash(int data[], int key, int n) {
	addr = indexFor(key);
	while (data[addr] != key) {
		addr = (addr + 1) % n;
		if (data[addr] == NULL_KEY || addr = indexFor(key))
			return -1;
	}
	return addr;
}
```

- 排序算法总结

| 排序法 | 平均 | 最差 | 辅助 | 是否稳定 |
|:-----:|:----:|:---:|:----:|:------:|
| 冒泡 | O(n\*n) | O(n\*n) | O(1) | 稳定 |
| 快排 | O(n\*logn) | O(n\*n) | O(logn)-O(n) | 不稳定 |
| 选择 | O(n\*n) | O(n\*n) | O(1) | 稳定 |
| 插入 | O(n\*n) | O(n\*n) | O(1) | 稳定 |
| 堆排 | O(n\*logn) | O(n\*logn) | O(1) | 不稳定 |
| 希尔 |  |  | O(1) | 不稳定 |

![sort](http://7xivx9.com1.z0.glb.clouddn.com/sort.png)